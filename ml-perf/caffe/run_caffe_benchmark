#!/bin/sh
[ -f "./configure" ] && . "./configure"
[ -f "../configure" ] && . "../configure"

pre_clean ()
{
    # check whether temp result file exists
    if [ -e "${RESULTDIR}/tmp.txt" ]; then
        rm "${RESULTDIR}/tmp.txt"
    fi
    if [ -e "${RESULTDIR}/bench_report.txt" ]; then
        rm "${RESULTDIR}/bench_report.txt"
    fi
}

post_clean ()
{
    # remove the intermediate result files
    if [ -e "${RESULTDIR}/tmp.txt" ]; then
        rm "${RESULTDIR}/tmp.txt"
    fi
    if [ -e "${RESULTDIR}/bench_report.txt" ]; then
        rm "${RESULTDIR}/bench_report.txt"
    fi
    if [ -e "${RESULTDIR}/side_band_info.txt" ]; then
        rm "${RESULTDIR}/side_band_info.txt"
    fi

}

run_scaling_wrt_shape ()
{
    pre_clean
    time=${TIME_NOW}
    cp ${MODELDIR}/caffe/${network}/${model_file} ${MODELDIR}/caffe/${network}/${model_file}.orig
    echo "xdim = ${xdim} ydim = ${ydim}"
    new_line="input_param { shape: { dim: 1 dim: 3 dim: ${xdim} dim: ${ydim} }}"
    sed -i "6s/.*/${new_line}/g" ${MODELDIR}/caffe/${network}/${model_file}
    # "dim: .\+ dim: .\+ dim: .\+ dim: .\{1,3\}"
    # regex:
    # .\+ = matches only strings containing at least one character
    # .\{1,3\} = matches 1 to 3 characters
    # version 1 prototxt:
    # (1) grep with the above regex
    # if grep return is not null then use sed to replace

    ${UTILDIR}/cpu_load 1 90 ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time} &
    pid=$!
    ${CAFFE_BENCH}/caffe time \
        --model=${MODELDIR}/caffe/${network}/${model_file} \
        --iterations=${loop} 2>&1 | tee -a ${RESULTDIR}/tmp.txt 
    
    wait
    cpu_util=$(${UTILDIR}/parse_cpu_load   ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time})
    echo "shape = ${xdim}:${ydim}:${channel} cpu utilization = ${cpu_util}" >> ${RESULTDIR}/side_band_info.txt
    rm ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time}

    ${ANALYZEDIR}/caffe/caffe_analyze_results \
        ${network} \
        ${benchmark_type} \
        ${RESULTDIR}/tmp.txt \
        ${RESULTDIR}/bench_report.txt \
        "${start}:${end}:${step}" \
        "${xdim}:${ydim}:${channel}"

    cat ${RESULTDIR}/side_band_info.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    cat ${RESULTDIR}/bench_report.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    cp ${MODELDIR}/caffe/${network}/${model_file}.orig ${MODELDIR}/caffe/${network}/${model_file}
    post_clean
}

run_scaling_wrt_batch ()
{
    # for future when batching is going to be supported
    pre_clean
    time=${TIME_NOW}
    cp ${MODELDIR}/caffe/${network}/${model_file} ${MODELDIR}/caffe/${network}/${model_file}.orig
    if [ "${start}" = "1" ]; then
        start="$((start-1))"
    fi
    for i in $(seq ${start} ${step} ${end})
    do
        if [ "${i}" = "0" ]; then
            i="$((i+1))"
        fi
        new_line="input_param { shape: { dim: ${i} dim: 3 dim: 227 dim: 227 } }"
        echo "${new_line}"
        sed -i "6s/.*/${new_line}/g" ${MODELDIR}/caffe/${network}/${model_file}
        ${UTILDIR}/cpu_load 1 90 ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time} &
        pid=$!
        ${CAFFE_BENCH}/caffe time \
            --model=${MODELDIR}/caffe/${network}/${model_file} \
            --iterations=${loop} 2>&1 | tee -a ${RESULTDIR}/tmp.txt 
        
        wait
        cpu_util=$(${UTILDIR}/parse_cpu_load   ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time})
        echo "#batch = ${i} cpu utilization = ${cpu_util}" >> ${RESULTDIR}/side_band_info.txt
        rm ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time}
    done
    [ "${start}" = "0" ] && start="$((start+1))"
    # update the final result file
    ${ANALYZEDIR}/caffe/caffe_analyze_results \
        ${network} \
        ${benchmark_type} \
        ${RESULTDIR}/tmp.txt \
        ${RESULTDIR}/bench_report.txt \
        "${start}:${end}:${step}"
    cat ${RESULTDIR}/side_band_info.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    cat ${RESULTDIR}/bench_report.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    cp ${MODELDIR}/caffe/${network}/${model_file}.orig ${MODELDIR}/caffe/${network}/${model_file}
    post_clean
}

run_monoshot ()
{
    pre_clean
    time=${TIME_NOW}
    ${UTILDIR}/cpu_load 1 90 ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time} &
    pid=$!
    ${CAFFE_BENCH}/caffe time \
           --model=${MODELDIR}/caffe/${network}/${model_file} \
           --iterations=${loop} 2>&1 | tee -a ${RESULTDIR}/tmp.txt 
    
    wait
    cpu_util=$(${UTILDIR}/parse_cpu_load   ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time})
    echo "cpu utilization = ${cpu_util}" >> ${RESULTDIR}/side_band_info.txt
    rm ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time}

    # update the final result file
    ${ANALYZEDIR}/caffe/caffe_analyze_results \
        ${network} \
        ${benchmark_type} \
        ${RESULTDIR}/tmp.txt \
        ${RESULTDIR}/bench_report.txt
        
    cat ${RESULTDIR}/side_band_info.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    cat ${RESULTDIR}/bench_report.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    post_clean
}

run_scaling_wrt_core ()
{
    pre_clean
    time=${TIME_NOW}
    for k in $(seq 1 ${TOTAL_CORES})
    do
        var="NUM_CORE_"${k}
        eval cpu_mask="\$$var"
        ${UTILDIR}/cpu_load 1 90 ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time} &
        pid=$!
        ${TASKSET} ${cpu_mask} ${CAFFE_BENCH}/caffe time \
            --model=${MODELDIR}/caffe/${network}/${model_file} \
            --iterations=${loop} 2>&1 | tee -a ${RESULTDIR}/tmp.txt 
        if [ "$?" != "0" ]; then
            echo "FAILED"
            return
        fi
        
        wait
        cpu_util=$(${UTILDIR}/parse_cpu_load   ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time})
        echo "#core = ${k} cpu utilization = ${cpu_util}" >> ${RESULTDIR}/side_band_info.txt
        rm ${RESULTDIR}/caffe/cpu_load_${network}_${benchmark_type}.${time}
    done
    # update the final result file
    ${ANALYZEDIR}/caffe/caffe_analyze_results \
        ${network} \
        ${benchmark_type} \
        ${RESULTDIR}/tmp.txt \
        ${RESULTDIR}/bench_report.txt
        
    cat ${RESULTDIR}/side_band_info.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    cat ${RESULTDIR}/bench_report.txt >> ${RESULTDIR}/caffe/${network}_${benchmark_type}.${time}
    post_clean
}

# $1 holds benchmark type
# =======================
benchmark_type=${1}

# $2 holds metadata
# =================
loop=$(echo "${2}"| cut -d: -f1)
network=$(echo "${2}"| cut -d: -f2)
model_file=$(echo "${2}"| cut -d: -f3)
echo "loop is ${loop}"
echo "model file is ${model_file}"
echo "network is ${network}"

case "${benchmark_type}" in
(batch_scale)
    # $3 holds batch sizes for batch_scale
    # =====================================
    echo "batch size validation should be done by each ML framework"
    start=$(echo "${3}"| cut -d: -f1)
    end=$(echo "${3}"| cut -d: -f2)
    step=$(echo "${3}"| cut -d: -f3)
    echo "start is ${start}"
    echo "end is ${end}"
    echo "step is ${step}"
    ;;
(shape_scale)
    # $3 hold auxillary data (shape)
    # ==============================
    # the fields are saved in vars because later when we
    # invoke function for each bench type we don't have
    # to pass args. If we don't save the args in variables
    # then inside the function the positional arguments will
    # all be zero
    xdim=$(echo "${3}"| cut -d: -f1)
    ydim=$(echo "${3}"| cut -d: -f2)
    channel=$(echo "${3}"| cut -d: -f3)
    echo "xdim is ${xdim}"
    echo "ydim is ${ydim}"
    echo "channel is ${channel}"
    ;;
esac

# Invoke the right benchmark type
if [ "${benchmark_type}" = "core_scale" ]; then
    echo "Inferencing/s wrt core scaling" 
    run_scaling_wrt_core
elif [ "${benchmark_type}" = "batch_scale" ]; then
    echo "Inferencing/s wrt batch scaling" 
    run_scaling_wrt_batch
elif [ "${benchmark_type}" = "shape_scale" ]; then
    echo "Inferencing/s wrt shape scaling" 
    run_scaling_wrt_shape
elif [ "${benchmark_type}" = "monoshot" ]; then
    echo "Inferencing/s monoshot" 
    run_monoshot
else
    echo "Caffe : unknown benchmark type selected"
fi

# Move back to parent directory
cd ${WORKDIR}
echo "SUCCESS"
return
